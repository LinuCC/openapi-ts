// This file is auto-generated by @hey-api/openapi-ts

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { client as _heyApiClient } from '../../client.gen'
import {
  addPet,
  deletePet,
  findPetsByStatus,
  findPetsByTags,
  getPetById,
  type Options,
  updatePet,
  updatePetWithForm,
  uploadFile
} from '../../sdk.gen'
import type {
  AddPetData,
  DeletePetData,
  FindPetsByStatusData,
  FindPetsByTagsData,
  GetPetByIdData,
  UpdatePetData,
  UpdatePetWithFormData,
  UploadFileData
} from '../../types.gen'

/**
 * Add a new pet to the store.
 * Add a new pet to the store.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const addPetMutation = (options?: Options<AddPetData>) => ({
  mutation: async (options: Options<AddPetData>) => {
    const { data } = await addPet(options)
    return data
  }
})

/**
 * Update an existing pet.
 * Update an existing pet by Id.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const updatePetMutation = (options?: Options<UpdatePetData>) => ({
  mutation: async (options: Options<UpdatePetData>) => {
    const { data } = await updatePet(options)
    return data
  }
})

/**
 * Finds Pets by status.
 * Multiple status values can be provided with comma separated strings.
 */
export const findPetsByStatusQuery = (options: Options<FindPetsByStatusData>) => ({
  key: ['findPetsByStatus', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await findPetsByStatus({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Finds Pets by tags.
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTagsQuery = (options: Options<FindPetsByTagsData>) => ({
  key: ['findPetsByTags', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await findPetsByTags({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Deletes a pet.
 * Delete a pet.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const deletePetMutation = (options?: Options<DeletePetData>) => ({
  mutation: async (options: Options<DeletePetData>) => {
    const { data } = await deletePet(options)
    return data
  }
})

/**
 * Find pet by ID.
 * Returns a single pet.
 */
export const getPetByIdQuery = (options: Options<GetPetByIdData>) => ({
  key: ['getPetById', options?.path],
  query: async (context: { signal: AbortSignal }) => {
    const { data } = await getPetById({
      ...options,
      signal: context.signal,
      throwOnError: true
    })
    return data
  }
})

/**
 * Updates a pet in the store with form data.
 * Updates a pet resource based on the form data.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const updatePetWithFormMutation = (options?: Options<UpdatePetWithFormData>) => ({
  mutation: async (options: Options<UpdatePetWithFormData>) => {
    const { data } = await updatePetWithForm(options)
    return data
  }
})

/**
 * Uploads an image.
 * Upload image of the pet.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const uploadFileMutation = (options?: Options<UploadFileData>) => ({
  mutation: async (options: Options<UploadFileData>) => {
    const { data } = await uploadFile(options)
    return data
  }
})
