// This file is auto-generated by @hey-api/openapi-ts

import { Injectable, resource } from '@angular/core';

import type { Options } from '../sdk.gen';
import {
  addPet,
  createUser,
  createUsersWithListInput,
  deleteOrder,
  deletePet,
  deleteUser,
  findPetsByStatus,
  findPetsByTags,
  getInventory,
  getOrderById,
  getPetById,
  getUserByName,
  loginUser,
  logoutUser,
  placeOrder,
  updatePet,
  updatePetWithForm,
  updateUser,
  uploadFile,
} from '../sdk.gen';
import type {
  AddPetData,
  CreateUserData,
  CreateUsersWithListInputData,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByTagsData,
  GetInventoryData,
  GetOrderByIdData,
  GetPetByIdData,
  GetUserByNameData,
  LoginUserData,
  LogoutUserData,
  PlaceOrderData,
  UpdatePetData,
  UpdatePetWithFormData,
  UpdateUserData,
  UploadFileData,
} from '../types.gen';

@Injectable({
  providedIn: 'root',
})
export class PetServiceResources {
  /**
   * Add a new pet to the store.
   * Add a new pet to the store.
   */
  public addPetResource<ThrowOnError extends boolean = false>(
    options: Options<AddPetData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => addPet(params),
      params: () => options,
    });
  }

  /**
   * Update an existing pet.
   * Update an existing pet by Id.
   */
  public updatePetResource<ThrowOnError extends boolean = false>(
    options: Options<UpdatePetData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => updatePet(params),
      params: () => options,
    });
  }

  /**
   * Finds Pets by status.
   * Multiple status values can be provided with comma separated strings.
   */
  public findPetsByStatusResource<ThrowOnError extends boolean = false>(
    options: Options<FindPetsByStatusData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => findPetsByStatus(params),
      params: () => options,
    });
  }

  /**
   * Finds Pets by tags.
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   */
  public findPetsByTagsResource<ThrowOnError extends boolean = false>(
    options: Options<FindPetsByTagsData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => findPetsByTags(params),
      params: () => options,
    });
  }

  /**
   * Deletes a pet.
   * Delete a pet.
   */
  public deletePetResource<ThrowOnError extends boolean = false>(
    options: Options<DeletePetData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => deletePet(params),
      params: () => options,
    });
  }

  /**
   * Find pet by ID.
   * Returns a single pet.
   */
  public getPetByIdResource<ThrowOnError extends boolean = false>(
    options: Options<GetPetByIdData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => getPetById(params),
      params: () => options,
    });
  }

  /**
   * Updates a pet in the store with form data.
   * Updates a pet resource based on the form data.
   */
  public updatePetWithFormResource<ThrowOnError extends boolean = false>(
    options: Options<UpdatePetWithFormData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => updatePetWithForm(params),
      params: () => options,
    });
  }

  /**
   * Uploads an image.
   * Upload image of the pet.
   */
  public uploadFileResource<ThrowOnError extends boolean = false>(
    options: Options<UploadFileData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => uploadFile(params),
      params: () => options,
    });
  }
}

@Injectable({
  providedIn: 'root',
})
export class StoreServiceResources {
  /**
   * Returns pet inventories by status.
   * Returns a map of status codes to quantities.
   */
  public getInventoryResource<ThrowOnError extends boolean = false>(
    options?: Options<GetInventoryData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => getInventory(params),
      params: () => options,
    });
  }

  /**
   * Place an order for a pet.
   * Place a new order in the store.
   */
  public placeOrderResource<ThrowOnError extends boolean = false>(
    options?: Options<PlaceOrderData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => placeOrder(params),
      params: () => options,
    });
  }

  /**
   * Delete purchase order by identifier.
   * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
   */
  public deleteOrderResource<ThrowOnError extends boolean = false>(
    options: Options<DeleteOrderData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => deleteOrder(params),
      params: () => options,
    });
  }

  /**
   * Find purchase order by ID.
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   */
  public getOrderByIdResource<ThrowOnError extends boolean = false>(
    options: Options<GetOrderByIdData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => getOrderById(params),
      params: () => options,
    });
  }
}

@Injectable({
  providedIn: 'root',
})
export class UserServiceResources {
  /**
   * Create user.
   * This can only be done by the logged in user.
   */
  public createUserResource<ThrowOnError extends boolean = false>(
    options?: Options<CreateUserData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => createUser(params),
      params: () => options,
    });
  }

  /**
   * Creates list of users with given input array.
   * Creates list of users with given input array.
   */
  public createUsersWithListInputResource<ThrowOnError extends boolean = false>(
    options?: Options<CreateUsersWithListInputData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => createUsersWithListInput(params),
      params: () => options,
    });
  }

  /**
   * Logs user into the system.
   * Log into the system.
   */
  public loginUserResource<ThrowOnError extends boolean = false>(
    options?: Options<LoginUserData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => loginUser(params),
      params: () => options,
    });
  }

  /**
   * Logs out current logged in user session.
   * Log user out of the system.
   */
  public logoutUserResource<ThrowOnError extends boolean = false>(
    options?: Options<LogoutUserData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => logoutUser(params),
      params: () => options,
    });
  }

  /**
   * Delete user resource.
   * This can only be done by the logged in user.
   */
  public deleteUserResource<ThrowOnError extends boolean = false>(
    options: Options<DeleteUserData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => deleteUser(params),
      params: () => options,
    });
  }

  /**
   * Get user by user name.
   * Get user detail based on username.
   */
  public getUserByNameResource<ThrowOnError extends boolean = false>(
    options: Options<GetUserByNameData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => getUserByName(params),
      params: () => options,
    });
  }

  /**
   * Update user resource.
   * This can only be done by the logged in user.
   */
  public updateUserResource<ThrowOnError extends boolean = false>(
    options: Options<UpdateUserData, ThrowOnError>,
  ) {
    return resource({
      loader: async ({ params }) => updateUser(params),
      params: () => options,
    });
  }
}
