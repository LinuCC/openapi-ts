// This file is auto-generated by @hey-api/openapi-ts

import { resource } from '@angular/core';

import type {
  AddPetData,
  CreateUserData,
  CreateUsersWithListInputData,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByTagsData,
  GetInventoryData,
  GetOrderByIdData,
  GetPetByIdData,
  GetUserByNameData,
  LoginUserData,
  LogoutUserData,
  PlaceOrderData,
  UpdatePetData,
  UpdatePetWithFormData,
  UpdateUserData,
  UploadFileData,
} from './types.gen';

/**
 * Add a new pet to the store.
 * Add a new pet to the store.
 */
export const addPetResource = (options: Omit<AddPetData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Update an existing pet.
 * Update an existing pet by Id.
 */
export const updatePetResource = (options: Omit<UpdatePetData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Finds Pets by status.
 * Multiple status values can be provided with comma separated strings.
 */
export const findPetsByStatusResource = (
  options: Omit<FindPetsByStatusData, 'url'>,
) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Finds Pets by tags.
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTagsResource = (
  options: Omit<FindPetsByTagsData, 'url'>,
) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Deletes a pet.
 * Delete a pet.
 */
export const deletePetResource = (options: Omit<DeletePetData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Find pet by ID.
 * Returns a single pet.
 */
export const getPetByIdResource = (options: Omit<GetPetByIdData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Updates a pet in the store with form data.
 * Updates a pet resource based on the form data.
 */
export const updatePetWithFormResource = (
  options: Omit<UpdatePetWithFormData, 'url'>,
) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Uploads an image.
 * Upload image of the pet.
 */
export const uploadFileResource = (options: Omit<UploadFileData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Returns pet inventories by status.
 * Returns a map of status codes to quantities.
 */
export const getInventoryResource = (options?: Omit<GetInventoryData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Place an order for a pet.
 * Place a new order in the store.
 */
export const placeOrderResource = (options?: Omit<PlaceOrderData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Delete purchase order by identifier.
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 */
export const deleteOrderResource = (options: Omit<DeleteOrderData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Find purchase order by ID.
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderByIdResource = (options: Omit<GetOrderByIdData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Create user.
 * This can only be done by the logged in user.
 */
export const createUserResource = (options?: Omit<CreateUserData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Creates list of users with given input array.
 * Creates list of users with given input array.
 */
export const createUsersWithListInputResource = (
  options?: Omit<CreateUsersWithListInputData, 'url'>,
) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Logs user into the system.
 * Log into the system.
 */
export const loginUserResource = (options?: Omit<LoginUserData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Logs out current logged in user session.
 * Log user out of the system.
 */
export const logoutUserResource = (options?: Omit<LogoutUserData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Delete user resource.
 * This can only be done by the logged in user.
 */
export const deleteUserResource = (options: Omit<DeleteUserData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Get user by user name.
 * Get user detail based on username.
 */
export const getUserByNameResource = (
  options: Omit<GetUserByNameData, 'url'>,
) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });

/**
 * Update user resource.
 * This can only be done by the logged in user.
 */
export const updateUserResource = (options: Omit<UpdateUserData, 'url'>) =>
  resource({
    loader: () => {
      throw new Error('Not implemented');
    },
    params: () => options,
  });
