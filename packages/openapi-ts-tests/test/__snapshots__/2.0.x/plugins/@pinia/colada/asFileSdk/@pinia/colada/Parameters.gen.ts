// This file is auto-generated by @hey-api/openapi-ts

import { useQuery, type UseQueryOptions } from '@pinia/colada';
import { toRef } from 'vue';
import type { CallWithParametersData, CallWithWeirdParameterNamesData } from '../../types.gen';
import { client } from '@pinia/colada/client';

export const useCallWithParametersQuery = async (params: {
    query: unknown;
    path: unknown;
    headers: unknown;
}, options?: UseQueryOptions<unknown, unknown, CallWithParametersData>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const headersRef = toRef(params?.headers);
    const query = useQuery({
        query: client({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            queryRef,
            pathRef,
            headersRef
        }),
        key: [
            'Parameters',
            'callWithParameters',
            queryRef,
            pathRef,
            headersRef
        ],
        ...options
    });
    return {
        ...query,
        query: queryRef,
        path: pathRef,
        headers: headersRef
    };
};

export const useCallWithWeirdParameterNamesQuery = async (params: {
    query: unknown;
    path: unknown;
    headers: unknown;
}, options?: UseQueryOptions<unknown, unknown, CallWithWeirdParameterNamesData>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const headersRef = toRef(params?.headers);
    const query = useQuery({
        query: client({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            queryRef,
            pathRef,
            headersRef
        }),
        key: [
            'Parameters',
            'callWithWeirdParameterNames',
            queryRef,
            pathRef,
            headersRef
        ],
        ...options
    });
    return {
        ...query,
        query: queryRef,
        path: pathRef,
        headers: headersRef
    };
};