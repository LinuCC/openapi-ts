// This file is auto-generated by @hey-api/openapi-ts

import { useQuery, type UseQueryOptions, useMutation, type UseMutationOptions } from '@pinia/colada';
import { toRef } from 'vue';
import type { ServiceWithEmptyTagData, PatchApiVbyApiVersionNoTagData, FooWowData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, CallWithDescriptionsData, CallWithParametersData, CallWithWeirdParameterNamesData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseResponse, CallWithResponseAndNoContentResponseData, DummyAData, DummyBData, CallWithResponseResponse, CallWithResponseData, CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, CallWithDuplicateResponsesData, CallWithResponsesResponse, CallWithResponsesError, CallWithResponsesData, CollectionFormatData, TypesData, TypesResponse, ComplexTypesData, ComplexTypesResponse, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PostApiVbyApiVersionBodyData, PostApiVbyApiVersionBodyResponse, PostApiVbyApiVersionBodyError } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const useServiceWithEmptyTagQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, ServiceWithEmptyTagData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'serviceWithEmptyTag'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePatchApiVbyApiVersionNoTagQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PatchApiVbyApiVersionNoTagData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'patch',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'patchApiVbyApiVersionNoTag'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useFooWowQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, FooWowData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'fooWow'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDeleteCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DeleteCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'delete',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'deleteCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useGetCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, GetCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'getCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useHeadCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, HeadCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'head',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'headCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useOptionsCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, OptionsCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'options',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'optionsCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePatchCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PatchCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'patch',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'patchCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePostCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PostCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'postCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePutCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PutCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'putCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithDescriptionsQuery = async (params: {
    query: CallWithDescriptionsData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallWithDescriptionsData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/descriptions/',
            query: queryRef
        }),
        key: [
            'Descriptions',
            'callWithDescriptions',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useCallWithParametersQuery = async (params: {
    query: CallWithParametersData['query'];
    path: CallWithParametersData['path'];
    headers: CallWithParametersData['headers'];
}, options?: UseQueryOptions<unknown, unknown, CallWithParametersData>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const headersRef = toRef(params?.headers);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            query: queryRef,
            path: pathRef,
            headers: headersRef
        }),
        key: [
            'Parameters',
            'callWithParameters',
            queryRef,
            pathRef,
            headersRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef,
        path: pathRef,
        headers: headersRef
    };
};

export const useCallWithWeirdParameterNamesQuery = async (params: {
    query: CallWithWeirdParameterNamesData['query'];
    path: CallWithWeirdParameterNamesData['path'];
    headers: CallWithWeirdParameterNamesData['headers'];
}, options?: UseQueryOptions<unknown, unknown, CallWithWeirdParameterNamesData>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const headersRef = toRef(params?.headers);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            query: queryRef,
            path: pathRef,
            headers: headersRef
        }),
        key: [
            'Parameters',
            'callWithWeirdParameterNames',
            queryRef,
            pathRef,
            headersRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef,
        path: pathRef,
        headers: headersRef
    };
};

export const useCallWithDefaultParametersQuery = async (params: {
    query: CallWithDefaultParametersData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallWithDefaultParametersData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/defaults',
            query: queryRef
        }),
        key: [
            'Defaults',
            'callWithDefaultParameters',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useCallWithDefaultOptionalParametersQuery = async (params: {
    query: CallWithDefaultOptionalParametersData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallWithDefaultOptionalParametersData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/defaults',
            query: queryRef
        }),
        key: [
            'Defaults',
            'callWithDefaultOptionalParameters',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useCallToTestOrderOfParamsQuery = async (params: {
    query: CallToTestOrderOfParamsData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallToTestOrderOfParamsData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/defaults',
            query: queryRef
        }),
        key: [
            'Defaults',
            'callToTestOrderOfParams',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useDuplicateNameQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateNameData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'delete',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDuplicateName2Query = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateName2Data>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName2'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDuplicateName3Query = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateName3Data>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName3'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDuplicateName4Query = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateName4Data>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName4'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithNoContentResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, CallWithNoContentResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/no-content'
        }),
        key: [
            'NoContent',
            'callWithNoContentResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithResponseAndNoContentResponseQuery = async (params?: {}, options?: UseQueryOptions<CallWithResponseAndNoContentResponseResponse, unknown, CallWithResponseAndNoContentResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content'
        }),
        key: [
            'Response',
            'callWithResponseAndNoContentResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDummyAQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DummyAData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/a'
        }),
        key: [
            'MultipleTags1',
            'dummyA'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDummyBQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DummyBData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/b'
        }),
        key: [
            'MultipleTags1',
            'dummyB'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithResponseQuery = async (params?: {}, options?: UseQueryOptions<CallWithResponseResponse, unknown, CallWithResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithDuplicateResponsesQuery = async (params?: {}, options?: UseQueryOptions<CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, CallWithDuplicateResponsesData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithDuplicateResponses'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithResponsesQuery = async (params?: {}, options?: UseQueryOptions<CallWithResponsesResponse, CallWithResponsesError, CallWithResponsesData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithResponses'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCollectionFormatQuery = async (params: {
    query: CollectionFormatData['query'];
}, options?: UseQueryOptions<unknown, unknown, CollectionFormatData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/collectionFormat',
            query: queryRef
        }),
        key: [
            'CollectionFormat',
            'collectionFormat',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useTypesQuery = async (params: {
    query: TypesData['query'];
    path: TypesData['path'];
}, options?: UseQueryOptions<TypesResponse, unknown, TypesData>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/types',
            query: queryRef,
            path: pathRef
        }),
        key: [
            'Types',
            'types',
            queryRef,
            pathRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef,
        path: pathRef
    };
};

export const useComplexTypesQuery = async (params: {
    query: ComplexTypesData['query'];
}, options?: UseQueryOptions<ComplexTypesResponse, unknown, ComplexTypesData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/complex',
            query: queryRef
        }),
        key: [
            'Complex',
            'complexTypes',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useCallWithResultFromHeaderQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, CallWithResultFromHeaderData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/header'
        }),
        key: [
            'Header',
            'callWithResultFromHeader'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useTestErrorCodeQuery = async (params: {
    query: TestErrorCodeData['query'];
}, options?: UseQueryOptions<unknown, unknown, TestErrorCodeData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/error',
            query: queryRef
        }),
        key: [
            'Error',
            'testErrorCode',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useNonAsciiæøåÆøÅöôêÊ字符串Query = async (params: {
    query: NonAsciiæøåÆøÅöôêÊ字符串Data['query'];
}, options?: UseQueryOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, unknown, NonAsciiæøåÆøÅöôêÊ字符串Data>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: queryRef
        }),
        key: [
            'Non-Ascii-æøåÆØÅöôêÊ',
            'nonAsciiæøåÆøÅöôêÊ字符串',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

/**
 * Body should not be unknown
 * Body should not be unknown
 */
export const usePostApiVbyApiVersionBodyMutation = async (params: {
    body: PostApiVbyApiVersionBodyData['body'];
}, options?: UseMutationOptions<PostApiVbyApiVersionBodyResponse, PostApiVbyApiVersionBodyData, PostApiVbyApiVersionBodyError>) => {
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/body',
            data: bodyRef
        }),
        key: [
            'default',
            'postApiVbyApiVersionBody',
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        body: bodyRef
    };
};