// This file is auto-generated by @hey-api/openapi-ts

import { useQuery, type UseQueryOptions, useMutation, type UseMutationOptions } from '@pinia/colada';
import { toRef } from 'vue';
import type { ServiceWithEmptyTagData, PatchApiVbyApiVersionNoTagData, FooWowData, PostApiVbyApiVersionBodyResponse, PostApiVbyApiVersionBodyData, PostApiVbyApiVersionBodyError } from '../../types.gen';
import { client } from '@pinia/colada/client';

export const useServiceWithEmptyTagQuery = async (params: {}, options?: UseQueryOptions<unknown, unknown, ServiceWithEmptyTagData>) => {
    const query = useQuery({
        query: client({
            method: 'get',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'serviceWithEmptyTag'
        ],
        ...options
    });
    return {
        ...query
    };
};

export const usePatchApiVbyApiVersionNoTagQuery = async (params: {}, options?: UseQueryOptions<unknown, unknown, PatchApiVbyApiVersionNoTagData>) => {
    const query = useQuery({
        query: client({
            method: 'patch',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'patchApiVbyApiVersionNoTag'
        ],
        ...options
    });
    return {
        ...query
    };
};

export const useFooWowQuery = async (params: {}, options?: UseQueryOptions<unknown, unknown, FooWowData>) => {
    const query = useQuery({
        query: client({
            method: 'put',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'fooWow'
        ],
        ...options
    });
    return {
        ...query
    };
};

/**
 * Body should not be unknown
 * Body should not be unknown
 */
export const usePostApiVbyApiVersionBodyMutation = async (params: {
    body: unknown;
}, options?: UseMutationOptions<PostApiVbyApiVersionBodyResponse, PostApiVbyApiVersionBodyData, PostApiVbyApiVersionBodyError>) => {
    const bodyRef = toRef(params?.body);
    const mutation = useMutation({
        mutation: client({
            method: 'post',
            url: '/api/v{api-version}/body',
            bodyRef
        }),
        key: [
            'default',
            'postApiVbyApiVersionBody',
            bodyRef
        ],
        ...options
    });
    return {
        ...mutation,
        body: bodyRef
    };
};