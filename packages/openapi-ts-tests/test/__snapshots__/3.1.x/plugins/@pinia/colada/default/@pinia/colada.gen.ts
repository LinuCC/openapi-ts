// This file is auto-generated by @hey-api/openapi-ts

import { useQuery, type UseQueryOptions, useMutation, type UseMutationOptions } from '@pinia/colada';
import { toRef } from 'vue';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportData, ImportResponse, FooWowData, ApiVVersionODataControllerCountResponse, ApiVVersionODataControllerCountData, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationResponse, GetApiVbyApiVersionSimpleOperationError, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseResponse, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseResponse, CallWithResponseAndNoContentResponseData, DummyAResponse, DummyAData, DummyBResponse, DummyBData, CallWithResponseResponse, CallWithResponseData, CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, CallWithDuplicateResponsesData, CallWithResponsesResponse, CallWithResponsesError, CallWithResponsesData, CollectionFormatData, TypesData, TypesResponse, UploadFileData, UploadFileResponse, FileResponseData, FileResponseResponse, ComplexTypesData, ComplexTypesResponse, MultipartResponseResponse, MultipartResponseData, MultipartRequestData, ComplexParamsData, ComplexParamsResponse, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const useExportQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, ExportData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'export'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePatchApiVbyApiVersionNoTagQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PatchApiVbyApiVersionNoTagData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'patch',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'patchApiVbyApiVersionNoTag'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useImportMutation = async (params: {
    body: ImportData['body'];
}, options?: UseMutationOptions<ImportResponse, ImportData, unknown>) => {
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/no+tag',
            data: bodyRef
        }),
        key: [
            'default',
            'import',
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        body: bodyRef
    };
};

export const useFooWowQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, FooWowData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/no+tag'
        }),
        key: [
            'default',
            'fooWow'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useApiVVersionODataControllerCountQuery = async (params?: {}, options?: UseQueryOptions<ApiVVersionODataControllerCountResponse, unknown, ApiVVersionODataControllerCountData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/simple/$count'
        }),
        key: [
            'Simple',
            'apiVVersionODataControllerCount'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useGetApiVbyApiVersionSimpleOperationQuery = async (params: {
    path: GetApiVbyApiVersionSimpleOperationData['path'];
}, options?: UseQueryOptions<GetApiVbyApiVersionSimpleOperationResponse, GetApiVbyApiVersionSimpleOperationError, GetApiVbyApiVersionSimpleOperationData>) => {
    const pathRef = toRef(params?.path);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/simple:operation',
            path: pathRef
        }),
        key: [
            'default',
            'getApiVbyApiVersionSimpleOperation',
            pathRef
        ],
        ...options
    });
    return {
        ...queryResult,
        path: pathRef
    };
};

export const useDeleteCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DeleteCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'delete',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'deleteCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useGetCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, GetCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'getCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useHeadCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, HeadCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'head',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'headCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useOptionsCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, OptionsCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'options',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'optionsCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePatchCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PatchCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'patch',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'patchCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePostCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PostCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'postCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const usePutCallWithoutParametersAndResponseQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, PutCallWithoutParametersAndResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/simple'
        }),
        key: [
            'Simple',
            'putCallWithoutParametersAndResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDeleteFooQuery = async (params: {
    path: DeleteFooData3['path'];
    headers: DeleteFooData3['headers'];
}, options?: UseQueryOptions<unknown, unknown, DeleteFooData3>) => {
    const pathRef = toRef(params?.path);
    const headersRef = toRef(params?.headers);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'delete',
            url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
            path: pathRef,
            headers: headersRef
        }),
        key: [
            'Parameters',
            'deleteFoo',
            pathRef,
            headersRef
        ],
        ...options
    });
    return {
        ...queryResult,
        path: pathRef,
        headers: headersRef
    };
};

export const useCallWithDescriptionsQuery = async (params: {
    query: CallWithDescriptionsData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallWithDescriptionsData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/descriptions',
            query: queryRef
        }),
        key: [
            'Descriptions',
            'callWithDescriptions',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

/**
 * @deprecated
 */
export const useDeprecatedCallQuery = async (params: {
    headers: DeprecatedCallData['headers'];
}, options?: UseQueryOptions<unknown, unknown, DeprecatedCallData>) => {
    const headersRef = toRef(params?.headers);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: headersRef
        }),
        key: [
            'Deprecated',
            'deprecatedCall',
            headersRef
        ],
        ...options
    });
    return {
        ...queryResult,
        headers: headersRef
    };
};

export const useCallWithParametersMutation = async (params: {
    query: CallWithParametersData['query'];
    path: CallWithParametersData['path'];
    headers: CallWithParametersData['headers'];
    body: CallWithParametersData['body'];
    cookies: {
        /**
         * This is the parameter that goes into the cookie
         */
        parameterCookie: string | null;
    };
}, options?: UseMutationOptions<unknown, CallWithParametersData, unknown>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const headersRef = toRef(params?.headers);
    const bodyRef = toRef(params?.body);
    const cookiesRef = toRef(params?.cookies);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            query: queryRef,
            path: pathRef,
            headers: headersRef,
            data: bodyRef,
            cookies: cookiesRef
        }),
        key: [
            'Parameters',
            'callWithParameters',
            queryRef,
            pathRef,
            headersRef,
            bodyRef,
            cookiesRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        query: queryRef,
        path: pathRef,
        headers: headersRef,
        body: bodyRef,
        cookies: cookiesRef
    };
};

export const useCallWithWeirdParameterNamesMutation = async (params: {
    query: CallWithWeirdParameterNamesData['query'];
    path: CallWithWeirdParameterNamesData['path'];
    headers: CallWithWeirdParameterNamesData['headers'];
    body: CallWithWeirdParameterNamesData['body'];
    cookies: {
        /**
         * This is the parameter that goes into the cookie
         */
        'PARAMETER-COOKIE': string | null;
    };
}, options?: UseMutationOptions<unknown, CallWithWeirdParameterNamesData, unknown>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const headersRef = toRef(params?.headers);
    const bodyRef = toRef(params?.body);
    const cookiesRef = toRef(params?.cookies);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            query: queryRef,
            path: pathRef,
            headers: headersRef,
            data: bodyRef,
            cookies: cookiesRef
        }),
        key: [
            'Parameters',
            'callWithWeirdParameterNames',
            queryRef,
            pathRef,
            headersRef,
            bodyRef,
            cookiesRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        query: queryRef,
        path: pathRef,
        headers: headersRef,
        body: bodyRef,
        cookies: cookiesRef
    };
};

export const useGetCallWithOptionalParamQuery = async (params: {
    query: GetCallWithOptionalParamData['query'];
    body: GetCallWithOptionalParamData['body'];
}, options?: UseQueryOptions<unknown, unknown, GetCallWithOptionalParamData>) => {
    const queryRef = toRef(params?.query);
    const bodyRef = toRef(params?.body);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/parameters',
            query: queryRef,
            data: bodyRef
        }),
        key: [
            'Parameters',
            'getCallWithOptionalParam',
            queryRef,
            bodyRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef,
        body: bodyRef
    };
};

export const usePostCallWithOptionalParamMutation = async (params: {
    query: PostCallWithOptionalParamData['query'];
    body: PostCallWithOptionalParamData['body'];
}, options?: UseMutationOptions<PostCallWithOptionalParamResponse, PostCallWithOptionalParamData, unknown>) => {
    const queryRef = toRef(params?.query);
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/parameters',
            query: queryRef,
            data: bodyRef
        }),
        key: [
            'Parameters',
            'postCallWithOptionalParam',
            queryRef,
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        query: queryRef,
        body: bodyRef
    };
};

export const usePostApiVbyApiVersionRequestBodyMutation = async (params: {
    query: PostApiVbyApiVersionRequestBodyData['query'];
    body: PostApiVbyApiVersionRequestBodyData['body'];
}, options?: UseMutationOptions<unknown, PostApiVbyApiVersionRequestBodyData, unknown>) => {
    const queryRef = toRef(params?.query);
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/requestBody',
            query: queryRef,
            data: bodyRef
        }),
        key: [
            'RequestBody',
            'postApiVbyApiVersionRequestBody',
            queryRef,
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        query: queryRef,
        body: bodyRef
    };
};

export const usePostApiVbyApiVersionFormDataMutation = async (params: {
    query: PostApiVbyApiVersionFormDataData['query'];
    body: PostApiVbyApiVersionFormDataData['body'];
}, options?: UseMutationOptions<unknown, PostApiVbyApiVersionFormDataData, unknown>) => {
    const queryRef = toRef(params?.query);
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/formData',
            query: queryRef,
            data: bodyRef
        }),
        key: [
            'FormData',
            'postApiVbyApiVersionFormData',
            queryRef,
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        query: queryRef,
        body: bodyRef
    };
};

export const useCallWithDefaultParametersQuery = async (params: {
    query: CallWithDefaultParametersData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallWithDefaultParametersData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/defaults',
            query: queryRef
        }),
        key: [
            'Defaults',
            'callWithDefaultParameters',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useCallWithDefaultOptionalParametersQuery = async (params: {
    query: CallWithDefaultOptionalParametersData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallWithDefaultOptionalParametersData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/defaults',
            query: queryRef
        }),
        key: [
            'Defaults',
            'callWithDefaultOptionalParameters',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useCallToTestOrderOfParamsQuery = async (params: {
    query: CallToTestOrderOfParamsData['query'];
}, options?: UseQueryOptions<unknown, unknown, CallToTestOrderOfParamsData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/defaults',
            query: queryRef
        }),
        key: [
            'Defaults',
            'callToTestOrderOfParams',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useDuplicateNameQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateNameData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'delete',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDuplicateName2Query = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateName2Data>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName2'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDuplicateName3Query = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateName3Data>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName3'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDuplicateName4Query = async (params?: {}, options?: UseQueryOptions<unknown, unknown, DuplicateName4Data>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/duplicate'
        }),
        key: [
            'Duplicate',
            'duplicateName4'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithNoContentResponseQuery = async (params?: {}, options?: UseQueryOptions<CallWithNoContentResponseResponse, unknown, CallWithNoContentResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/no-content'
        }),
        key: [
            'noContent',
            'callWithNoContentResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithResponseAndNoContentResponseQuery = async (params?: {}, options?: UseQueryOptions<CallWithResponseAndNoContentResponseResponse, unknown, CallWithResponseAndNoContentResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content'
        }),
        key: [
            'Response',
            'callWithResponseAndNoContentResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDummyAQuery = async (params?: {}, options?: UseQueryOptions<DummyAResponse, unknown, DummyAData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/a'
        }),
        key: [
            'MultipleTags1',
            'dummyA'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useDummyBQuery = async (params?: {}, options?: UseQueryOptions<DummyBResponse, unknown, DummyBData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/b'
        }),
        key: [
            'MultipleTags1',
            'dummyB'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithResponseQuery = async (params?: {}, options?: UseQueryOptions<CallWithResponseResponse, unknown, CallWithResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithDuplicateResponsesQuery = async (params?: {}, options?: UseQueryOptions<CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, CallWithDuplicateResponsesData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithDuplicateResponses'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCallWithResponsesQuery = async (params?: {}, options?: UseQueryOptions<CallWithResponsesResponse, CallWithResponsesError, CallWithResponsesData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithResponses'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useCollectionFormatQuery = async (params: {
    query: CollectionFormatData['query'];
}, options?: UseQueryOptions<unknown, unknown, CollectionFormatData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/collectionFormat',
            query: queryRef
        }),
        key: [
            'CollectionFormat',
            'collectionFormat',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useTypesQuery = async (params: {
    query: TypesData['query'];
    path: TypesData['path'];
}, options?: UseQueryOptions<TypesResponse, unknown, TypesData>) => {
    const queryRef = toRef(params?.query);
    const pathRef = toRef(params?.path);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/types',
            query: queryRef,
            path: pathRef
        }),
        key: [
            'Types',
            'types',
            queryRef,
            pathRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef,
        path: pathRef
    };
};

export const useUploadFileMutation = async (params: {
    path: UploadFileData['path'];
    body: UploadFileData['body'];
}, options?: UseMutationOptions<UploadFileResponse, UploadFileData, unknown>) => {
    const pathRef = toRef(params?.path);
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/upload',
            path: pathRef,
            data: bodyRef
        }),
        key: [
            'Upload',
            'uploadFile',
            pathRef,
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        path: pathRef,
        body: bodyRef
    };
};

export const useFileResponseQuery = async (params: {
    path: FileResponseData['path'];
}, options?: UseQueryOptions<FileResponseResponse, unknown, FileResponseData>) => {
    const pathRef = toRef(params?.path);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/file/{id}',
            path: pathRef
        }),
        key: [
            'FileResponse',
            'fileResponse',
            pathRef
        ],
        ...options
    });
    return {
        ...queryResult,
        path: pathRef
    };
};

export const useComplexTypesQuery = async (params: {
    query: ComplexTypesData['query'];
}, options?: UseQueryOptions<ComplexTypesResponse, unknown, ComplexTypesData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/complex',
            query: queryRef
        }),
        key: [
            'Complex',
            'complexTypes',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useMultipartResponseQuery = async (params?: {}, options?: UseQueryOptions<MultipartResponseResponse, unknown, MultipartResponseData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'get',
            url: '/api/v{api-version}/multipart'
        }),
        key: [
            'multipart',
            'multipartResponse'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useMultipartRequestMutation = async (params: {
    body: MultipartRequestData['body'];
}, options?: UseMutationOptions<unknown, MultipartRequestData, unknown>) => {
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/multipart',
            data: bodyRef
        }),
        key: [
            'multipart',
            'multipartRequest',
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        body: bodyRef
    };
};

export const useComplexParamsMutation = async (params: {
    path: ComplexParamsData['path'];
    body: ComplexParamsData['body'];
}, options?: UseMutationOptions<ComplexParamsResponse, ComplexParamsData, unknown>) => {
    const pathRef = toRef(params?.path);
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/complex/{id}',
            path: pathRef,
            data: bodyRef
        }),
        key: [
            'Complex',
            'complexParams',
            pathRef,
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        path: pathRef,
        body: bodyRef
    };
};

export const useCallWithResultFromHeaderQuery = async (params?: {}, options?: UseQueryOptions<unknown, unknown, CallWithResultFromHeaderData>) => {
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/header'
        }),
        key: [
            'Header',
            'callWithResultFromHeader'
        ],
        ...options
    });
    return {
        ...queryResult
    };
};

export const useTestErrorCodeQuery = async (params: {
    query: TestErrorCodeData['query'];
}, options?: UseQueryOptions<unknown, unknown, TestErrorCodeData>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/error',
            query: queryRef
        }),
        key: [
            'Error',
            'testErrorCode',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

export const useNonAsciiæøåÆøÅöôêÊ字符串Query = async (params: {
    query: NonAsciiæøåÆøÅöôêÊ字符串Data['query'];
}, options?: UseQueryOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, unknown, NonAsciiæøåÆøÅöôêÊ字符串Data>) => {
    const queryRef = toRef(params?.query);
    const queryResult = useQuery({
        query: _heyApiClient({
            method: 'post',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: queryRef
        }),
        key: [
            'Non-Ascii-æøåÆØÅöôêÊ',
            'nonAsciiæøåÆøÅöôêÊ字符串',
            queryRef
        ],
        ...options
    });
    return {
        ...queryResult,
        query: queryRef
    };
};

/**
 * Login User
 */
export const usePutWithFormUrlEncodedMutation = async (params: {
    body: PutWithFormUrlEncodedData['body'];
}, options?: UseMutationOptions<unknown, PutWithFormUrlEncodedData, unknown>) => {
    const bodyRef = toRef(params?.body);
    const mutationResult = useMutation({
        mutation: _heyApiClient({
            method: 'put',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            data: bodyRef
        }),
        key: [
            'Non-Ascii-æøåÆØÅöôêÊ',
            'putWithFormUrlEncoded',
            bodyRef
        ],
        ...options
    });
    return {
        ...mutationResult,
        body: bodyRef
    };
};