// This file is auto-generated by @hey-api/openapi-ts

import { useQuery, type UseQueryOptions } from '@pinia/colada';
import { toRef } from 'vue';
import type { CallWithResponseAndNoContentResponseResponse, CallWithResponseAndNoContentResponseData, CallWithResponseResponse, CallWithResponseData, CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, CallWithDuplicateResponsesData, CallWithResponsesResponse, CallWithResponsesError, CallWithResponsesData } from '../../types.gen';
import { client } from '@pinia/colada/client';

export const useCallWithResponseAndNoContentResponseQuery = async (params: {}, options?: UseQueryOptions<CallWithResponseAndNoContentResponseResponse, unknown, CallWithResponseAndNoContentResponseData>) => {
    const query = useQuery({
        query: client({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content'
        }),
        key: [
            'Response',
            'callWithResponseAndNoContentResponse'
        ],
        ...options
    });
    return {
        ...query
    };
};

export const useCallWithResponseQuery = async (params: {}, options?: UseQueryOptions<CallWithResponseResponse, unknown, CallWithResponseData>) => {
    const query = useQuery({
        query: client({
            method: 'get',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithResponse'
        ],
        ...options
    });
    return {
        ...query
    };
};

export const useCallWithDuplicateResponsesQuery = async (params: {}, options?: UseQueryOptions<CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, CallWithDuplicateResponsesData>) => {
    const query = useQuery({
        query: client({
            method: 'post',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithDuplicateResponses'
        ],
        ...options
    });
    return {
        ...query
    };
};

export const useCallWithResponsesQuery = async (params: {}, options?: UseQueryOptions<CallWithResponsesResponse, CallWithResponsesError, CallWithResponsesData>) => {
    const query = useQuery({
        query: client({
            method: 'put',
            url: '/api/v{api-version}/response'
        }),
        key: [
            'Response',
            'callWithResponses'
        ],
        ...options
    });
    return {
        ...query
    };
};