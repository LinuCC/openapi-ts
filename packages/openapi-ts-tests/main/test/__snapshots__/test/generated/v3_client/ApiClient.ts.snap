import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { OpenAPIConfig } from './core/OpenAPI';
import { Interceptors } from './core/OpenAPI';
import { FetchHttpRequest } from './core/FetchHttpRequest';

import { CollectionFormat } from './sdk.gen';
import { Complex } from './sdk.gen';
import { Default } from './sdk.gen';
import { Defaults } from './sdk.gen';
import { Deprecated } from './sdk.gen';
import { Descriptions } from './sdk.gen';
import { Duplicate } from './sdk.gen';
import { Error } from './sdk.gen';
import { FileResponse } from './sdk.gen';
import { FormData } from './sdk.gen';
import { Header } from './sdk.gen';
import { Multipart } from './sdk.gen';
import { MultipleTags1 } from './sdk.gen';
import { MultipleTags2 } from './sdk.gen';
import { MultipleTags3 } from './sdk.gen';
import { NoContent } from './sdk.gen';
import { NonAsciiÆøåÆøÅöôêÊ } from './sdk.gen';
import { Parameters } from './sdk.gen';
import { RequestBody } from './sdk.gen';
import { Response } from './sdk.gen';
import { Simple } from './sdk.gen';
import { Types } from './sdk.gen';
import { Upload } from './sdk.gen';

type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;

export class ApiClient {

	public readonly collectionFormat: CollectionFormat;
	public readonly complex: Complex;
	public readonly default: Default;
	public readonly defaults: Defaults;
	public readonly deprecated: Deprecated;
	public readonly descriptions: Descriptions;
	public readonly duplicate: Duplicate;
	public readonly error: Error;
	public readonly fileResponse: FileResponse;
	public readonly formData: FormData;
	public readonly header: Header;
	public readonly multipart: Multipart;
	public readonly multipleTags1: MultipleTags1;
	public readonly multipleTags2: MultipleTags2;
	public readonly multipleTags3: MultipleTags3;
	public readonly noContent: NoContent;
	public readonly nonAsciiÆøåÆøÅöôêÊ: NonAsciiÆøåÆøÅöôêÊ;
	public readonly parameters: Parameters;
	public readonly requestBody: RequestBody;
	public readonly response: Response;
	public readonly simple: Simple;
	public readonly types: Types;
	public readonly upload: Upload;

	public readonly request: BaseHttpRequest;

	constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {
		this.request = new HttpRequest({
			BASE: config?.BASE ?? 'http://localhost:3000/base',
			VERSION: config?.VERSION ?? '1.0',
			WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
			CREDENTIALS: config?.CREDENTIALS ?? 'include',
			TOKEN: config?.TOKEN,
			USERNAME: config?.USERNAME,
			PASSWORD: config?.PASSWORD,
			HEADERS: config?.HEADERS,
			ENCODE_PATH: config?.ENCODE_PATH,
			interceptors: {
				request: config?.interceptors?.request ?? new Interceptors(),
				response: config?.interceptors?.response ?? new Interceptors(),
      },
		});

		this.collectionFormat = new CollectionFormat(this.request);
		this.complex = new Complex(this.request);
		this.default = new Default(this.request);
		this.defaults = new Defaults(this.request);
		this.deprecated = new Deprecated(this.request);
		this.descriptions = new Descriptions(this.request);
		this.duplicate = new Duplicate(this.request);
		this.error = new Error(this.request);
		this.fileResponse = new FileResponse(this.request);
		this.formData = new FormData(this.request);
		this.header = new Header(this.request);
		this.multipart = new Multipart(this.request);
		this.multipleTags1 = new MultipleTags1(this.request);
		this.multipleTags2 = new MultipleTags2(this.request);
		this.multipleTags3 = new MultipleTags3(this.request);
		this.noContent = new NoContent(this.request);
		this.nonAsciiÆøåÆøÅöôêÊ = new NonAsciiÆøåÆøÅöôêÊ(this.request);
		this.parameters = new Parameters(this.request);
		this.requestBody = new RequestBody(this.request);
		this.response = new Response(this.request);
		this.simple = new Simple(this.request);
		this.types = new Types(this.request);
		this.upload = new Upload(this.request);
	}
}
