// This file is auto-generated by @hey-api/openapi-ts

import { defineQuery, defineMutation } from '@pinia/colada';
import type { ImportData, ImportResponse, ApiVVersionODataControllerCountResponse, GetApiVbyApiVersionSimpleOperationResponse, GetApiVbyApiVersionSimpleOperationError, CallWithParametersData, CallWithWeirdParameterNamesData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseResponse, DummyAResponse, DummyBResponse, CallWithResponseResponse, CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, CallWithResponsesResponse, CallWithResponsesError, TypesResponse, UploadFileData, UploadFileResponse, FileResponseResponse, ComplexTypesResponse, MultipartResponseResponse, MultipartRequestData, ComplexParamsData, ComplexParamsResponse, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../../types.gen';

export const useExportQuery = defineQuery<unknown, unknown>({
    key: [
        'default',
        'export'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/no-tag'
        });
    }
});

export const useImportMutation = defineMutation<ImportData, ImportResponse, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/no-tag',
            data
        });
    }
});

export const useApiVVersionODataControllerCountQuery = defineQuery<ApiVVersionODataControllerCountResponse, unknown>({
    key: [
        'Simple',
        'apiVVersionODataControllerCount'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/simple/$count'
        });
    }
});

export const useGetApiVbyApiVersionSimpleOperationQuery = defineQuery<GetApiVbyApiVersionSimpleOperationResponse, GetApiVbyApiVersionSimpleOperationError>({
    key: [
        'default',
        'getApiVbyApiVersionSimpleOperation'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/simple:operation'
        });
    }
});

export const useDeleteCallWithoutParametersAndResponseQuery = defineQuery<unknown, unknown>({
    key: [
        'Simple',
        'deleteCallWithoutParametersAndResponse'
    ],
    query: async () => {
        return client({
            method: 'delete',
            url: '/api/v{api-version}/simple'
        });
    }
});

export const useGetCallWithoutParametersAndResponseQuery = defineQuery<unknown, unknown>({
    key: [
        'Simple',
        'getCallWithoutParametersAndResponse'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/simple'
        });
    }
});

export const useHeadCallWithoutParametersAndResponseQuery = defineQuery<unknown, unknown>({
    key: [
        'Simple',
        'headCallWithoutParametersAndResponse'
    ],
    query: async () => {
        return client({
            method: 'head',
            url: '/api/v{api-version}/simple'
        });
    }
});

export const useOptionsCallWithoutParametersAndResponseQuery = defineQuery<unknown, unknown>({
    key: [
        'Simple',
        'optionsCallWithoutParametersAndResponse'
    ],
    query: async () => {
        return client({
            method: 'options',
            url: '/api/v{api-version}/simple'
        });
    }
});

export const usePatchCallWithoutParametersAndResponseQuery = defineQuery<unknown, unknown>({
    key: [
        'Simple',
        'patchCallWithoutParametersAndResponse'
    ],
    query: async () => {
        return client({
            method: 'patch',
            url: '/api/v{api-version}/simple'
        });
    }
});

export const usePostCallWithoutParametersAndResponseQuery = defineQuery<unknown, unknown>({
    key: [
        'Simple',
        'postCallWithoutParametersAndResponse'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/simple'
        });
    }
});

export const usePutCallWithoutParametersAndResponseQuery = defineQuery<unknown, unknown>({
    key: [
        'Simple',
        'putCallWithoutParametersAndResponse'
    ],
    query: async () => {
        return client({
            method: 'put',
            url: '/api/v{api-version}/simple'
        });
    }
});

export const useDeleteFooQuery = defineQuery<unknown, unknown>({
    key: [
        'Parameters',
        'deleteFoo'
    ],
    query: async () => {
        return client({
            method: 'delete',
            url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}'
        });
    }
});

export const useCallWithDescriptionsQuery = defineQuery<unknown, unknown>({
    key: [
        'Descriptions',
        'callWithDescriptions'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/descriptions'
        });
    }
});

/**
 * @deprecated
 */
export const useDeprecatedCallQuery = defineQuery<unknown, unknown>({
    key: [
        'Deprecated',
        'deprecatedCall'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/parameters/deprecated'
        });
    }
});

export const useCallWithParametersMutation = defineMutation<CallWithParametersData, unknown, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            data
        });
    }
});

export const useCallWithWeirdParameterNamesMutation = defineMutation<CallWithWeirdParameterNamesData, unknown, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            data
        });
    }
});

export const useGetCallWithOptionalParamQuery = defineQuery<unknown, unknown>({
    key: [
        'Parameters',
        'getCallWithOptionalParam'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/parameters'
        });
    }
});

export const usePostCallWithOptionalParamMutation = defineMutation<PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/parameters',
            data
        });
    }
});

export const usePostApiVbyApiVersionRequestBodyMutation = defineMutation<PostApiVbyApiVersionRequestBodyData, unknown, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/requestBody',
            data
        });
    }
});

export const usePostApiVbyApiVersionFormDataMutation = defineMutation<PostApiVbyApiVersionFormDataData, unknown, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/formData',
            data
        });
    }
});

export const useCallWithDefaultParametersQuery = defineQuery<unknown, unknown>({
    key: [
        'Defaults',
        'callWithDefaultParameters'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/defaults'
        });
    }
});

export const useCallWithDefaultOptionalParametersQuery = defineQuery<unknown, unknown>({
    key: [
        'Defaults',
        'callWithDefaultOptionalParameters'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/defaults'
        });
    }
});

export const useCallToTestOrderOfParamsQuery = defineQuery<unknown, unknown>({
    key: [
        'Defaults',
        'callToTestOrderOfParams'
    ],
    query: async () => {
        return client({
            method: 'put',
            url: '/api/v{api-version}/defaults'
        });
    }
});

export const useDuplicateNameQuery = defineQuery<unknown, unknown>({
    key: [
        'Duplicate',
        'duplicateName'
    ],
    query: async () => {
        return client({
            method: 'delete',
            url: '/api/v{api-version}/duplicate'
        });
    }
});

export const useDuplicateName2Query = defineQuery<unknown, unknown>({
    key: [
        'Duplicate',
        'duplicateName2'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/duplicate'
        });
    }
});

export const useDuplicateName3Query = defineQuery<unknown, unknown>({
    key: [
        'Duplicate',
        'duplicateName3'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/duplicate'
        });
    }
});

export const useDuplicateName4Query = defineQuery<unknown, unknown>({
    key: [
        'Duplicate',
        'duplicateName4'
    ],
    query: async () => {
        return client({
            method: 'put',
            url: '/api/v{api-version}/duplicate'
        });
    }
});

export const useCallWithNoContentResponseQuery = defineQuery<CallWithNoContentResponseResponse, unknown>({
    key: [
        'NoContent',
        'callWithNoContentResponse'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/no-content'
        });
    }
});

export const useCallWithResponseAndNoContentResponseQuery = defineQuery<CallWithResponseAndNoContentResponseResponse, unknown>({
    key: [
        'Response',
        'callWithResponseAndNoContentResponse'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content'
        });
    }
});

export const useDummyAQuery = defineQuery<DummyAResponse, unknown>({
    key: [
        'MultipleTags1',
        'dummyA'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/a'
        });
    }
});

export const useDummyBQuery = defineQuery<DummyBResponse, unknown>({
    key: [
        'MultipleTags1',
        'dummyB'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/multiple-tags/b'
        });
    }
});

export const useCallWithResponseQuery = defineQuery<CallWithResponseResponse, unknown>({
    key: [
        'Response',
        'callWithResponse'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/response'
        });
    }
});

export const useCallWithDuplicateResponsesQuery = defineQuery<CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError>({
    key: [
        'Response',
        'callWithDuplicateResponses'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/response'
        });
    }
});

export const useCallWithResponsesQuery = defineQuery<CallWithResponsesResponse, CallWithResponsesError>({
    key: [
        'Response',
        'callWithResponses'
    ],
    query: async () => {
        return client({
            method: 'put',
            url: '/api/v{api-version}/response'
        });
    }
});

export const useCollectionFormatQuery = defineQuery<unknown, unknown>({
    key: [
        'CollectionFormat',
        'collectionFormat'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/collectionFormat'
        });
    }
});

export const useTypesQuery = defineQuery<TypesResponse, unknown>({
    key: [
        'Types',
        'types'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/types'
        });
    }
});

export const useUploadFileMutation = defineMutation<UploadFileData, UploadFileResponse, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/upload',
            data
        });
    }
});

export const useFileResponseQuery = defineQuery<FileResponseResponse, unknown>({
    key: [
        'FileResponse',
        'fileResponse'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/file/{id}'
        });
    }
});

export const useComplexTypesQuery = defineQuery<ComplexTypesResponse, unknown>({
    key: [
        'Complex',
        'complexTypes'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/complex'
        });
    }
});

export const useMultipartResponseQuery = defineQuery<MultipartResponseResponse, unknown>({
    key: [
        'multipart',
        'multipartResponse'
    ],
    query: async () => {
        return client({
            method: 'get',
            url: '/api/v{api-version}/multipart'
        });
    }
});

export const useMultipartRequestMutation = defineMutation<MultipartRequestData, unknown, unknown>({
    mutation: async (data) => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/multipart',
            data
        });
    }
});

export const useComplexParamsMutation = defineMutation<ComplexParamsData, ComplexParamsResponse, unknown>({
    mutation: async (data) => {
        return client({
            method: 'put',
            url: '/api/v{api-version}/complex/{id}',
            data
        });
    }
});

export const useCallWithResultFromHeaderQuery = defineQuery<unknown, unknown>({
    key: [
        'Header',
        'callWithResultFromHeader'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/header'
        });
    }
});

export const useTestErrorCodeQuery = defineQuery<unknown, unknown>({
    key: [
        'Error',
        'testErrorCode'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/error'
        });
    }
});

export const useNonAsciiæøåÆøÅöôêÊ字符串Query = defineQuery<NonAsciiæøåÆøÅöôêÊ字符串Response, unknown>({
    key: [
        'Non-Ascii-æøåÆØÅöôêÊ',
        'nonAsciiæøåÆøÅöôêÊ字符串'
    ],
    query: async () => {
        return client({
            method: 'post',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串'
        });
    }
});

/**
 * Login User
 */
export const usePutWithFormUrlEncodedMutation = defineMutation<PutWithFormUrlEncodedData, unknown, unknown>({
    mutation: async (data) => {
        return client({
            method: 'put',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            data
        });
    }
});